trigger:
- master

name: 2.1.$(Rev:r)

pool:
  vmImage: 'windows-latest'

variables:
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  BQC.ForceNewBaseline: false

stages:
- stage: Build
  displayName: Build
  jobs:

  - job: Build
    displayName: Build and Test
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET 9'
      inputs:
        version: 9.0.x
        includePreviewVersions: false

    - task: PowerShell@2
      displayName: 'Set version environment variable'
      inputs:
        filePath: 'setVersionEnvironmentVariable.ps1'
      env:
        SOURCE_BRANCH_NAME: $(Build.SourceBranchName)
        BUILD_NUMBER: $(Build.BuildNumber)

    - task: NuGetToolInstaller@1

    - task: DotNetCoreCLI@2
      displayName: 'Restore nuget packages'
      inputs:
        command: 'restore'
        projects: '**/Tharga.MongoDB*.csproj'
        feedsToUse: 'select'

    - task: DotNetCoreCLI@2
      displayName: 'Build'
      inputs:
        command: 'build'
        projects: '**/Tharga.MongoDB*.csproj'
        arguments: '-c Release --no-restore /p:Version=$(Build.BuildNumber) /p:NoWarn=0618'
        versioningScheme: 'byEnvVar'
        versionEnvVar: 'messagesPackageVersion'

    - task: DotNetCoreCLI@2
      displayName: 'Test'
      inputs:
        command: 'test'
        projects: '**/Tharga.MongoDB*.Tests.csproj'
        arguments: '-c $(buildConfiguration) --no-build --filter "Category!=Database" /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:SkipAutoProps=true /p:ExcludeByAttribute="Obsolete"'

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage results'
      condition: succeededOrFailed()
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '**/*coverage.cobertura.xml'

    # - task: BuildQualityChecks@8
    #   displayName: 'Build Quality Checks'
    #   inputs:
    #     checkWarnings: true
    #     warningFailOption: 'build'
    #     allowWarningVariance: true
    #     warningVariance: '5'
    #     checkCoverage: false
    #     coverageFailOption: 'build'
    #     coverageType: 'lines'
    #     allowCoverageVariance: true
    #     coverageVariance: '5'

    - task: DotNetCoreCLI@2
      displayName: 'Pack Tharga.MongoDB'
      inputs:
        command: 'pack'
        packagesToPack: '**/Tharga.MongoDB.csproj'
        versioningScheme: 'byBuildNumber'
        arguments: '--configuration Release /p:IncludeSymbols=true /p:IncludeSource=true /p:SymbolPackageFormat=snupkg /p:ContinuousIntegrationBuild=true'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'

- stage: Release
  displayName: Release
  dependsOn: Build
  #condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'master'))
  jobs:

  - job: Release
    displayName: Release
    steps:
    - download: current
      artifact: drop
    - checkout: self
      persistCredentials: true

    - script: |
        echo "Files in workspace:"
        dir "$(Pipeline.Workspace)/drop" /s /b
      displayName: 'List pipeline workspace drop files'

    - task: NuGetCommand@2
      displayName: 'Push main NuGet package'
      inputs:
        command: 'push'
        packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg'
        nuGetFeedType: 'external'
        publishFeedCredentials: 'Nuget.org'

    - powershell: |
        $ErrorActionPreference = "Stop"

        $packageId = "Tharga.MongoDB"
        $version = "$(Build.BuildNumber)"

        $nugetUrl = "https://www.nuget.org/packages/$packageId/$version/"

        Write-Host "Checking NuGet validation for $packageId v$version..."
        while ($true) {
            try {
                $response = Invoke-WebRequest -Uri $nugetUrl -UseBasicParsing

                if ($response.Content -match "badge-verified" -or $response.Content -match "Install-Package") {
                    Write-Host "✅ Package has been validated and is now public."
                    break
                } else {
                    Write-Host "⏳ Validation pending. Retrying in 60 seconds..."
                }
            } catch {
                Write-Host "Package not yet available. Retrying in 60 seconds..."
            }

            Start-Sleep -Seconds 60
        }
      displayName: '🕐 Wait for NuGet .nupkg validation'

    - task: NuGetCommand@2
      displayName: 'Push symbols package'
      inputs:
        command: 'push'
        packagesToPush: '$(Pipeline.Workspace)/**/*.snupkg'
        nuGetFeedType: 'external'
        publishFeedCredentials: 'Nuget.org'

    - script: |
         git tag $(Build.BuildNumber)
         git push origin $(Build.BuildNumber)
      workingDirectory: $(Build.SourcesDirectory)
      displayName: Tag
